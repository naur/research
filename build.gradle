allprojects {
    apply plugin: 'maven'
    apply plugin: 'idea'
//    apply plugin: 'checkstyle'
//    apply plugin: 'findbugs'
//    apply plugin: 'pmd'
//    apply plugin: 'jdepend'
    group = 'org.naure'
    version = '1.0'
//    tasks.withType(Compile) {
//        options.encoding = 'UTF-8'
//    }

//    checkstyle {
//        //configFile = new File("${rootProject.projectDir}/config/checkstyle.xml").toURL()
//        configFile = file(rootDir + '/config/checkstyle.xml')
//    }

    task show << {
        println version
        println project.description
        println relativePath(compileJava.destinationDir)
        println relativePath(processResources.destinationDir)
    }
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    ext {
//        profile = project['profile']
        configFile = file("${rootDir}/config/env.groovy").toURL()

        slf4jVersion = '1.6.4'
        commonsCodecVersion = '1.3'
        commonsLang3Version = '3.3.2'
        commonsIOVersion = '2.0.1'
        spring_version = '4.0.5.RELEASE'
        aspectjVersion = '1.6.11'
        cglib_version = '3.1'
        xstreamVersion = '1.4.2'
        junit_version = '4.7'
        jactor_version = '4.2.0'
        servlet_api_version = '3.0-alpha-1'
        jrobin_version = '1.5.9'
        fluent_hc_version = '4.4-alpha1'
        jackson_version = '1.9.13'
        servlet_jstl_version = '1.2'
        castor_version = '1.2'
        xerces_version = '2.8.1'
        rome_version = '1.0'
        fileupload_version = '1.2.2'
        poi_version = '3.7'
        guava_version = '17.0'
        zookeeper_version = '3.4.5'
        jedis_version = '2.0.0'
        spring_data_mongodb_version = '1.5.1.RELEASE'
        sleepycat_version = '5.0.103'
        cron4j_version = '2.2.5'
        httl_version = '1.0.11'
    }

    compileJava {
        options.encoding = 'UTF-8'
    }
    compileTestJava {
        options.encoding = 'UTF-8'
    }

    jar {
        manifest {
            attributes("Implementation-Title": "Gradle", "Implementation-Version": version)
        }
    }

    processResources {
        from(sourceSets.main.resources.srcDirs) {
            def config = new ConfigSlurper().parse(configFile);
            if (project.hasProperty('profile')) {
                ext.profile = project['profile']
                config = config.merge(new ConfigSlurper(ext.profile).parse(configFile));
            }
            if (project.hasProperty('home')) {
                config = config.merge(new ConfigSlurper('home').parse(configFile));
            } else if (project.hasProperty('research')) {
                config = config.merge(new ConfigSlurper('research').parse(configFile));
            } else if (project.hasProperty('shoping')) {
                config = config.merge(new ConfigSlurper('shoping').parse(configFile));
            } else {
                //默认 research
                config = config.merge(new ConfigSlurper('research').parse(configFile));
            }
            filter(org.apache.tools.ant.filters.ReplaceTokens,
                    tokens: config.toProperties()
            )
        }
    }

    task placeholderResources(type: Copy) {
        from(sourceSets.main.resources.srcDirs) {
            def config = new ConfigSlurper().parse(configFile);
            if (hasProperty('profile')) {
                ext.profile = project['profile']
                config = config.merge(new ConfigSlurper(ext.profile).parse(configFile));
            }
            if (hasProperty('home')) {
                config = config.merge(new ConfigSlurper('home').parse(configFile));
            } else if (hasProperty('research')) {
                config = config.merge(new ConfigSlurper('research').parse(configFile));
            } else if (hasProperty('shoping')) {
                config = config.merge(new ConfigSlurper('shoping').parse(configFile));
            } else {
                //默认 research
                config = config.merge(new ConfigSlurper('research').parse(configFile));
            }
            filter(org.apache.tools.ant.filters.ReplaceTokens,
                    tokens: config.toProperties()
            )
        }
    }

    testClasses.dependsOn processResources
    test.dependsOn testClasses
    test.doFirst {
//        println "Test classpath is:- "
//        sourceSets.test.runtimeClasspath.getFiles().each { file ->
//            println "file: \"" + file + "\""
//        }
    }

    dependencies {
        compile group: 'commons-codec', name: 'commons-codec', version: commonsCodecVersion
        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version
        compile(group: 'org.springframework', name: 'spring-context', version: spring_version) {
            exclude(module: 'commons-logging')
        }
        compile group: 'org.springframework', name: 'spring-aop', version: spring_version
        compile group: 'org.aspectj', name: 'aspectjrt', version: aspectjVersion
        compile group: 'org.aspectj', name: 'aspectjweaver', version: aspectjVersion
        compile group: 'cglib', name: 'cglib', version: cglib_version
        compile group: 'com.thoughtworks.xstream', name: 'xstream', version: xstreamVersion

        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
        runtime group: 'org.slf4j', name: 'jcl-over-slf4j', version: slf4jVersion
        runtime group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4jVersion
        runtime group: 'commons-io', name: 'commons-io', version: commonsIOVersion

        testCompile group: 'junit', name: 'junit', version: junit_version
        testCompile group: 'org.springframework', name: 'spring-test', version: spring_version
    }

    repositories {
        mavenLocal()

        maven { url 'http://repo.maven.apache.org/maven2' }
        maven { url 'http://download.oracle.com/maven' }
        maven { url 'http://repo2.maven.org/maven2' }
        maven { url 'http://repo.springsource.org/libs-release' }
        maven { url 'http://download.java.net/maven/2/' }
    }
}
